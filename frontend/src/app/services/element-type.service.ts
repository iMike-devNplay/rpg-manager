import { ElementTypeConfig, GameSystem, ElementType } from '../models/element-types';

export const ELEMENT_TYPES_CONFIG: ElementTypeConfig[] = [
  // √âl√©ments de base (disponibles pour tous les syst√®mes)
  {
    id: 'text',
    name: 'Texte',
    description: '√âl√©ment textuel simple pour notes, descriptions, etc.',
    gameSystem: null,
    icon: 'üìù',
    category: 'basic'
  },
  {
    id: 'numeric',
    name: 'Num√©rique',
    description: 'Valeur num√©rique avec modification rapide',
    gameSystem: null,
    icon: 'üî¢',
    category: 'basic'
  },
  {
    id: 'select',
    name: 'S√©lection',
    description: 'Liste d√©roulante avec options pr√©d√©finies',
    gameSystem: null,
    icon: 'üìã',
    category: 'basic'
  },
  {
    id: 'hp',
    name: 'Points de vie',
    description: 'Gestion des points de vie (max, courant, temporaires)',
    gameSystem: null,
    icon: '‚ù§Ô∏è',
    category: 'combat'
  },
  {
    id: 'attack',
    name: 'Attaque',
    description: 'Information d\'attaque (arme ou sort) avec bonus, d√©g√¢ts et propri√©t√©s',
    gameSystem: null,
    icon: '‚öîÔ∏è',
    category: 'combat'
  },
  {
    id: 'equipment',
    name: '√âquipement',
    description: 'Objet avec quantit√©, poids et statut d\'√©quipement',
    gameSystem: null,
    icon: 'üéí',
    category: 'equipment'
  },

  // √âl√©ments sp√©cifiques √† D&D 5e
  {
    id: 'dnd-attribute',
    name: 'Caract√©ristique D&D',
    description: 'Caract√©ristique D&D avec modificateur et jet de sauvegarde',
    gameSystem: 'dnd5e',
    icon: 'üí™',
    category: 'attribute'
  },
  {
    id: 'dnd-attributes-group',
    name: 'Groupe d\'attributs D&D',
    description: 'Groupe des 6 attributs principaux avec modificateurs et jets de sauvegarde',
    gameSystem: 'dnd5e',
    icon: 'üìä',
    category: 'attribute'
  },
  {
    id: 'dnd-proficiency-bonus',
    name: 'Bonus de ma√Ætrise D&D',
    description: 'Bonus de ma√Ætrise avec calcul automatique selon le niveau',
    gameSystem: 'dnd5e',
    icon: 'üéØ',
    category: 'attribute'
  },
  {
    id: 'dnd-level',
    name: 'Niveau D&D',
    description: 'Niveau du personnage (1-20)',
    gameSystem: 'dnd5e',
    icon: 'üìà',
    category: 'attribute'
  },
  {
    id: 'dnd-skills-group',
    name: 'Groupe de comp√©tences D&D',
    description: 'Toutes les comp√©tences D&D 5e avec ma√Ætrise et expertise',
    gameSystem: 'dnd5e',
    icon: 'üéØ',
    category: 'attribute'
  },
  {
    id: 'dnd-spell',
    name: 'Sort D&D',
    description: 'Sort D&D avec niveau, √©cole et composants',
    gameSystem: 'dnd5e',
    icon: '‚ú®',
    category: 'magic'
  }
];

export class ElementTypeService {
  /**
   * R√©cup√®re les types d'√©l√©ments disponibles pour un syst√®me de jeu donn√©
   */
  static getAvailableTypes(gameSystem: GameSystem): ElementTypeConfig[] {
    return ELEMENT_TYPES_CONFIG.filter(config => 
      config.gameSystem === null || config.gameSystem === gameSystem
    );
  }

  /**
   * R√©cup√®re la configuration d'un type d'√©l√©ment
   */
  static getTypeConfig(type: ElementType): ElementTypeConfig | undefined {
    return ELEMENT_TYPES_CONFIG.find(config => config.id === type);
  }

  /**
   * R√©cup√®re les types par cat√©gorie pour un syst√®me donn√©
   */
  static getTypesByCategory(gameSystem: GameSystem): Record<string, ElementTypeConfig[]> {
    const availableTypes = this.getAvailableTypes(gameSystem);
    return availableTypes.reduce((acc, config) => {
      if (!acc[config.category]) {
        acc[config.category] = [];
      }
      acc[config.category].push(config);
      return acc;
    }, {} as Record<string, ElementTypeConfig[]>);
  }

  /**
   * V√©rifie si un type d'√©l√©ment est disponible pour un syst√®me donn√©
   */
  static isTypeAvailable(type: ElementType, gameSystem: GameSystem): boolean {
    const config = this.getTypeConfig(type);
    return config ? (config.gameSystem === null || config.gameSystem === gameSystem) : false;
  }
}